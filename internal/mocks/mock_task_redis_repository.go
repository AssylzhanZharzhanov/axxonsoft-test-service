// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/AssylzhanZharzhanov/axxonsoft-test-service/internal/domain (interfaces: TaskRedisRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/AssylzhanZharzhanov/axxonsoft-test-service/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockTaskRedisRepository is a mock of TaskRedisRepository interface.
type MockTaskRedisRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTaskRedisRepositoryMockRecorder
}

// MockTaskRedisRepositoryMockRecorder is the mock recorder for MockTaskRedisRepository.
type MockTaskRedisRepositoryMockRecorder struct {
	mock *MockTaskRedisRepository
}

// NewMockTaskRedisRepository creates a new mock instance.
func NewMockTaskRedisRepository(ctrl *gomock.Controller) *MockTaskRedisRepository {
	mock := &MockTaskRedisRepository{ctrl: ctrl}
	mock.recorder = &MockTaskRedisRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskRedisRepository) EXPECT() *MockTaskRedisRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockTaskRedisRepository) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTaskRedisRepositoryMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTaskRedisRepository)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockTaskRedisRepository) Get(arg0 context.Context, arg1 string) (*domain.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*domain.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTaskRedisRepositoryMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTaskRedisRepository)(nil).Get), arg0, arg1)
}

// Set mocks base method.
func (m *MockTaskRedisRepository) Set(arg0 context.Context, arg1 string, arg2 *domain.Task, arg3 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockTaskRedisRepositoryMockRecorder) Set(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockTaskRedisRepository)(nil).Set), arg0, arg1, arg2, arg3)
}
